params {

//loading data
samples = "$baseDir/data/raw/"
sampleCSV = "$baseDir/data/raw/samples_all.csv"

//output data
output = "$baseDir/processed/"
baseDir = "$baseDir"


//loading indexes
gtf = "/scratch/project/open-27-18/gencode/gencode.v36.annotation.gtf"
salmon_index = "/scratch/project/open-27-18/salmon_gencode/salmon_index"
star_index = "/scratch/project/open-27-18/star_index"
genome_folder = "/scratch/project/open-27-18/mrd_trans/genome/"
genome = "${genome_folder}resources_broad_hg38_v0_Homo_sapiens_assembly38.fasta"

testing_star_index = "/scratch/project/open-27-18/mrd_trans/genome/genome_dir/"

//conda envs
path_to_conda = "/scratch/project/open-27-18/mrd_trans/workflows/envs/nextflowenv1.yml"

//STAR
fasta_suffix_is_gz = "--readFilesCommand gunzip -c" //leave empty if fasta files are not compressed

//DESEQ2
deseq_run_name = "default"

//not categorized
baserecalibrator_resources = "$baseDir/genome/recab_resources"
funcotator_resource_folder = "$baseDir/genome/funcotator_dataSources.v1.7.20200521s"

//MUTECT2_RESOURCES
POM  = "$baseDir/genome/somatic-hg38_1000g_pon.hg38.vcf.gz"
POM_INDEX = "$baseDir/genome/somatic-hg38_1000g_pon.hg38.vcf.gz.tbi"
germline_resources = "$baseDir/genome/somatic-hg38_af-only-gnomad.hg38.vcf.gz"
germline_resources_index = "$baseDir/genome/somatic-hg38_af-only-gnomad.hg38.vcf.gz.tbi"

}
//DRIMseq


process {

    withLabel: low { 
        memory = 4.GB
        cpus = 2 
    }

    withLabel: medium { 
        memory = 12.GB 
        cpus = 6
    }

    withLabel: ribo_det { 
        memory = 40.GB
        cpus = 20 
    }

    withLabel: index_star {
        memory = 64.GB
        cpus = 64
    }
        withLabel: star { 
        memory = 44.GB
        cpus = 24
    }

        withLabel: recab { 
        memory = 6.GB 
        cpus = 3
    }

        withLabel: vcf2maf { 
        memory = 12.GB 
        cpus = 4
    }
    
        withLabel: trim_galore { 
        memory = 6.GB 
        cpus = 6
    }
        withLabel: mark_dup { 
        memory = 50.GB
        cpus = 25
    }
        withLabel: mutect2 { 
        memory = 12.GB
        cpus = 1
    }

        withLabel: annotation_maf {
        memory = 24.GB
        cpus = 12
    }


}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

timeline {
    enabled = true
    file    = "${params.output}log/${trace_timestamp}/timeline.html"
}
report {
    enabled = true
    file    = "${params.output}log/${trace_timestamp}/report.html"
}
trace {
    enabled = true
    file    = "${params.output}log/${trace_timestamp}/trace.txt"
}
dag {
    enabled = true
    file    = "${params.output}log/${trace_timestamp}/dag.html"
}


profiles {
           
    standard {
        conda.enabled = true
        process.conda = "${params.path_to_conda}"
        process.executor = 'local'
        process.cache = 'lenient'
        
       }
    vcftomaf {
        conda.enabled = true
        process.conda = "/scratch/project/open-27-18/mrd_trans/workflows/envs/vcftomaf2.yml"
        process.executor = 'local'
       }
    cluster_pbs {
        conda.enabled = true
        process.conda = "${params.path_to_conda}"
        process.executor = 'pbspro'
        process.queue = 'qcpu'
        process.cpus = 128
        process.clusterOptions = "-q qcpu -N NF_star -l select=1:ncpus=${task.cpus},walltime=10:00:00 -A OPEN-27-18 -j oe -o run_log/"
        }

}


// the container should work but I don't think docker is installed on karolina
//    docker {
//        conda.enabled = false
//        docker.enabled = true
//        process.container = "daradis/rnaseqnf:latest"
//        process.executor = 'local'
//       }